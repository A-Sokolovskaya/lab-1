{Задание: Найти крадчайший путь между двумя городами с помощью алгоритма Дейкстры, вывести путь
Исходные данные: файл с матрицей расстояний между городами (неориентированный граф), №исходного и №конечного городов
Пример исходного файла:
024000
201070
410340
003030
074302
000020
1
6}
program lab1;

var
  gr: array of array of integer;
  f: text;
  ks, pn, po: integer;//размер матрицы, № города прибытия, № города отправления

procedure readgr(var gr: array of array of integer; var ks: integer; var pn, po: integer);
var
  i, j: integer;
  s: char;
  str: array of string;
  
begin
  writeln('Исходная матрица расстояний:');
  ks := 0;
  assign(f, 'Исходные данные.txt');
  reset(f);
  while not eoln(f) do
  begin
    read(f, s); 
    ks := ks + 1; //размерность графа
  end;
  close(f);
  setlength(str, ks + 2); //оттуда буду считывать номера городов 
  assign(f, 'Исходные данные.txt');
  reset(f);  
  Setlength(gr, ks);
  for i := 0 to ks - 1 do
    SetLength(gr[i], ks); //задаём пустую матрицу
  for i := 0 to ks - 1 do
  begin
    while not eoln(f) do
      for j := 0 to ks - 1 do
      begin
        read(f, s);
        gr[i, j] := strtoint(s); //заполняем матрицу 
      end;
    readln(f);
  end;
  close(f);
  assign(f, 'Исходные данные.txt');
  reset(f);          // читаем номера городов 
  while not eof(f) do
  begin
    for i := 0 to ks + 1 do
      readln(f, str[i]);
  end;
  po := strtoint(str[ks]);
  pn := strtoint(str[ks + 1]);
  close(f);
end;


procedure outputgr(var gr: array of array of integer; var ks: integer; var pn, po: integer);//вывод матрицы
var
  i, j: integer;
begin
  for i := 0 to ks - 1 do
  begin
    for j := 0 to ks - 1 do
    begin
      write(gr[i, j]:3);
    end;
    writeln;
  end;
  writeln('Пункт отравления: ', po);
  writeln('Пункт назначения: ', pn);
  po := po - 1;
  pn := pn - 1; //отнимаем от пунктов отправления и назначения 1 для соответствия индексам
end;

procedure algde(var gr: array of array of integer; var ks: integer; var pn, po: integer);//реализация алгоритма Дейкстры
var
  i, j, min, mini: integer;
  pt, a: array of integer;
  seen: array of boolean;
begin
  setlength(pt, ks);
  setlength(a, ks);
  setlength(seen, ks);
  for i := 0 to ks - 1 do
    for j := 0 to ks - 1 do
      if gr[i,j]=0 then 
        gr[i,j]:=100000;   //Заменила все 0 на 1000000, чтобы не считывалось нулевое расстояние
  for i := 0 to ks - 1 do
    pt[i] := 1000000;
  pt[po] := 0;
  a[po] := 0;
  for i := 0 to ks - 1 do
    seen[i] := FALSE;
  for i := 0 to ks - 2 do
  begin
    min := 1000000;
    for j := 0 to ks - 1 do
      if (not seen[j]) and (pt[j] < min) then //для проверки существования более оптимального пути
      begin
        min := pt[j];
        mini := j;
      end;
    seen[mini] := TRUE;
    for j := 0 to ks - 1 do
      if pt[j] > pt[mini] + gr[mini, j] then
      begin
        pt[j] := pt[mini] + gr[mini, j];
        a[j] := mini;
      end;  
  end;  
  writeln('', pt[pn]);
  i := pn;
  writeln ('Путь:');
  while i <> 0 do
  begin
    write(i+1,'<--');
    i := a[i];
  end;
  
end;

begin
  readgr(gr, ks, pn, po);
  outputgr(gr, ks, pn, po);
  write ('Крадчайшее расстояние: ');
  algde(gr, ks, pn, po);
end.
